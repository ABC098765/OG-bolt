<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Super Fruit Center üçä</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #111;
    }
    canvas {
      display: block;
    }
  </style>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/three@0.150.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.150.0/examples/js/controls/OrbitControls.js"></script>

  <script>
    // Scene, Camera, Renderer
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 0.1, 1000);
    camera.position.z = 5;

    const renderer = new THREE.WebGLRenderer({antialias:true});
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const controls = new THREE.OrbitControls(camera, renderer.domElement);

    // Orange (just a sphere for now)
    const orangeMat = new THREE.MeshStandardMaterial({ color: 0xff8800, roughness: 0.5 });
    const orange = new THREE.Mesh(new THREE.SphereGeometry(1, 32, 32), orangeMat);
    scene.add(orange);

    // Light
    const light = new THREE.PointLight(0xffffff, 2, 100);
    light.position.set(5, 5, 5);
    scene.add(light);

    // Splash textures
    const loader = new THREE.TextureLoader();
    const splashTextures = [
      loader.load("splash1.png"),
      loader.load("splash2.png"),
      loader.load("splash3.png")
    ];

    const splashes = [];

    // Function to create a splash
    function createSplash() {
      const tex = splashTextures[Math.floor(Math.random() * splashTextures.length)];
      const mat = new THREE.MeshBasicMaterial({
        map: tex,
        transparent: true,
        opacity: 1,
        depthWrite: false
      });
      const splash = new THREE.Mesh(new THREE.PlaneGeometry(3, 3), mat);
      splash.rotation.z = Math.random() * Math.PI * 2;
      splash.position.copy(orange.position);
      splashes.push({mesh: splash, life: 1});
      scene.add(splash);
    }

    // On click event
    window.addEventListener("click", () => {
      // Hide orange temporarily
      orange.visible = false;
      createSplash();
    });

    // Animate
    function animate() {
      requestAnimationFrame(animate);

      // Animate splashes
      for (let i = splashes.length - 1; i >= 0; i--) {
        const s = splashes[i];
        s.life -= 0.01;
        s.mesh.material.opacity = Math.max(s.life, 0);
        s.mesh.scale.setScalar(2 - s.life);

        if (s.life <= 0) {
          scene.remove(s.mesh);
          splashes.splice(i, 1);
          orange.visible = true; // bring orange back after splash fades
        }
      }

      renderer.render(scene, camera);
    }

    animate();

    window.addEventListener("resize", () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>
</html>
